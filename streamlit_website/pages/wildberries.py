import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import requests
import os
from dotenv import load_dotenv

load_dotenv()

st.set_page_config(page_title="Wildberries –ê–Ω–∞–ª–∏—Ç–∏–∫–∞", layout="wide")
primary_color = "#5a188a"

st.markdown("""
    <style>
    #MainMenu {visibility: hidden;}
    footer {visibility: hidden;}
    header {visibility: hidden;}
    .stDeployButton {display:none;}
    </style>
    """, unsafe_allow_html=True)
st.markdown(
    f"<h1 style='text-align:center; color:{primary_color}'>Wildberries –ê–Ω–∞–ª–∏—Ç–∏–∫–∞</h1>",
    unsafe_allow_html=True
)

with st.form("user_form"):
    req_type = st.selectbox(
        "–¢–∏–ø –∑–∞–ø—Ä–æ—Å–∞",
        ("–ü–æ–∏—Å–∫", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è", "–ü—Ä–æ–¥–∞–≤–µ—Ü"),
        help="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞"
    )
    if req_type == "–ü–æ–∏—Å–∫":
        query_text = st.text_input("–¢–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞", placeholder="–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞")
    else:
        query_text = st.text_input("–°—Å—ã–ª–∫–∞", placeholder="–í—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–ª–∏ –ø—Ä–æ–¥–∞–≤—Ü–∞")

    num = st.number_input(
        "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤",
        min_value=1, max_value=1000, value=100, step=1,
        help="–°–∫–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä–æ–≤ –∑–∞–≥—Ä—É–∑–∏—Ç—å"
    )

    order = st.selectbox(
        "–ü–æ—Ä—è–¥–æ–∫ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏",
        ("–ü–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏", "–°–Ω–∞—á–∞–ª–∞ –¥–µ—à–µ–≤—ã–µ", "–°–Ω–∞—á–∞–ª–∞ –¥–æ—Ä–æ–≥–∏–µ", "–ü–æ —Ä–µ–π—Ç–∏–Ω–≥—É", "–ü–æ –Ω–æ–≤–∏–Ω–∫–∞–º")
    )

    submit = st.form_submit_button("–ó–ê–ü–†–û–°–ò–¢–¨")

endpoints = {
    "–ü–æ–∏—Å–∫": "api/v1/wildberries/search",
    "–ö–∞—Ç–µ–≥–æ—Ä–∏—è": "api/v1/wildberries/category",
    "–ü—Ä–æ–¥–∞–≤–µ—Ü": "api/v1/wildberries/seller"
}
endpoint = endpoints[req_type]

if req_type == "–ü–æ–∏—Å–∫":
    params = {
        "text": query_text,
        "num": int(num),
        "order": order
    }
else:
    params = {
        "link": query_text,
        "num": int(num),
        "order": order
    }

def fetch_api(url, params):
    try:
        response = requests.post(url, json=params, timeout=60)
        if response.status_code == 200:
            return response.json(), None
        return None, f"–û—à–∏–±–∫–∞ API {response.status_code}: {response.text}"
    except Exception as e:
        return None, f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}"

if submit:
    api_url = f"http://{os.getenv('API_GATEWAY_HOST')}:{os.getenv('API_GATEWAY_PORT')}/{endpoint}"
    with st.spinner("–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ..."):
        result, error = fetch_api(api_url, params)
    if error:
        st.error(error)
    elif result and result.get("data"):
        data = result["data"]
        filename = result.get("filename") or "data"
        df = pd.DataFrame(data)
        rename_map = {
            "product_id": "ProductId",
            "name": "Name",
            "brand": "Brand",
            "price": "Price",
            "discount_price": "DiscountPrice",
            "rating": "Rating",
            "reviews": "Reviews"
        }
        df = df.rename(columns=rename_map)
        
        st.success(f"‚úÖ –ü–æ–ª—É—á–µ–Ω —Ñ–∞–π–ª: **{filename}**. –í—Å–µ–≥–æ –ø–æ–∑–∏—Ü–∏–π: {len(df)}")

        st.markdown("### üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ –±—Ä–µ–Ω–¥–∞–º")
        col1, col2, col3 = st.columns(3)

        with col1:
            top_brands = df["Brand"].fillna("–ù–µ—Ç–ë—Ä–µ–Ω–¥–∞").value_counts().nlargest(10)
            plt.figure(figsize=(5, 4))
            top_brands.plot(kind="bar", color=primary_color)
            plt.title("–¢–û–ü-10 –±—Ä–µ–Ω–¥–æ–≤ (—Ç–æ–≤–∞—Ä—ã)")
            plt.ylabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤")
            plt.xticks(rotation=45, ha='right')
            st.pyplot(plt)
            plt.clf()

        with col2:
            mean_prices = (
                df[['Brand', 'Price']]
                .assign(Price=pd.to_numeric(df['Price'], errors='coerce'))
                .groupby("Brand")["Price"]
                .mean()
                .fillna(0)
                .sort_values(ascending=False)
                .head(10)
            )
            plt.figure(figsize=(5, 4))
            mean_prices.plot(kind="bar", color=primary_color)
            plt.title("–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ (–¢–û–ü-10 –±—Ä–µ–Ω–¥–æ–≤)")
            plt.ylabel("–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞")
            plt.xticks(rotation=45, ha='right')
            st.pyplot(plt)
            plt.clf()

        with col3:
            top_reviews = (
                df[['Brand', 'Reviews']]
                .assign(Reviews=pd.to_numeric(df['Reviews'], errors='coerce'))
                .groupby("Brand")["Reviews"]
                .sum()
                .fillna(0)
                .sort_values(ascending=False)
                .head(10)
            )
            plt.figure(figsize=(5, 4))
            top_reviews.plot(kind="bar", color=primary_color)
            plt.title("–û—Ç–∑—ã–≤—ã (–¢–û–ü-10 –±—Ä–µ–Ω–¥–æ–≤)")
            plt.ylabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤")
            plt.xticks(rotation=45, ha='right')
            st.pyplot(plt)
            plt.clf()

        csv = df.to_csv(index=False).encode('utf-8')
        st.download_button(
            label="üì• –°–∫–∞—á–∞—Ç—å CSV",
            data=csv,
            file_name=f"{filename}.csv",
            mime="text/csv",
            use_container_width=True
        )

        st.markdown("### üìÑ –í—Å–µ —Ç–æ–≤–∞—Ä—ã")
        st.dataframe(df, use_container_width=True, hide_index=True)
    else:
        st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –∏–ª–∏ API –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç.")
else:
    st.info("–í–≤–µ–¥–∏—Ç–µ —É—Å–ª–æ–≤–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∏ –Ω–∞–∂–º–∏—Ç–µ **–ó–ê–ü–†–û–°–ò–¢–¨**.")

